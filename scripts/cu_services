#!/bin/bash

#
# This file is part of the celery-utils (https://github.com/e.sovetkin/celery-utils).
# Copyright (c) 2022 Jenya Sovetkin.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, version 2.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#


cd $(git rev-parse --show-toplevel)


function _defaults {
    APP="cu"

    IF_DRYRUN=""
}


function _check_dependency {
    for prog in "$@"
    do
        if ! command -v "${prog}" &> /dev/null
        then
            echo "${prog} is missing!"
            exit 1
        fi
    done
}

function _celery_worker_suffix {
    echo --queues=$(cu_configs worker queues | jq -r .) \
         --autoscale=$(cu_configs worker workers | jq -r .),0 \
         --max-memory-per-child=$(cu_configs worker max_memory | jq -r .) \
         --loglevel=$(cu_configs logging level | jq -r .) \
         --logfile="$(cu_configs logs_path | jq -r .)/worker-%p%I.log" \
         --events \
         --without-mingle
}


function _start_worker {
    echo celery -A "$1" worker $(_celery_worker_suffix)
}


function _start_flower {
    echo celery -A "$1" \
         --broker=$(cu_configs broker_url | jq -r .) \
         flower \
         --port="$(cu_configs flower port | jq -r .)"
}


function _start_webserver {
    echo python3 - \<\<\< "'import cu.webserver.server'"
}


function _logrotate {
    path="$(cu_configs logging logrotate | jq -r .)"

    if [ ! -f "${path}" ]
    then
        >&2 echo "${path} file is missing! Run cu configs to generate it"
        exit 1
    fi

    echo logrotate -v "${path}" -s "${path}.state"
}


function print_help {
    echo "Usage: $0 [command] [--option value]"
    echo
    echo "Commands:"
    echo
    echo "    worker       start a worker"
    echo
    echo "    webserver    start a webserver"
    echo
    echo "    flower       start a flower service"
    echo
    echo "    logrotate    run logrotate"
    echo
    echo "Options:"
    echo
    echo "    -a,--app     name of the app to run"
    echo "                 Default value is probably okay for all use cases,"
    echo "                 as the tasks are imported through configuration files."
    echo "                 Default: \"${APP}\""
    echo
    echo "Flags:"
    echo
    echo "    -h,--help    print this page"
    echo
    echo "    -d,--dryrun  dry run: print commands to be executed"
    echo
}


function parse_args {
    while [[ $# -gt 0 ]]
    do
        case $1 in
            -h|--help)
                print_help
                exit
                ;;
            -a|--app)
                shift
                APP="$1"
                ;;
            -d|--dryrun)
                IF_DRYRUN="yes"
                shift
                ;;
            -*|--*)
                echo "Unknown option: $1"
                exit 1
                ;;
            *)
                COMMANDS+=("$1")
                shift
                ;;
        esac
    done
}


COMMANDS=()
_defaults
parse_args $@

CMD=""
for COMM in ${COMMANDS[@]}
do
    case $COMM in
        worker)
            _check_dependency celery cu_configs jq
            CMD=$(_start_worker "${APP}")
            break
            ;;
        webserver)
            _check_dependency python3 cu
            CMD=$(_start_webserver)
            break
            ;;
        flower)
            _check_dependency celery cu_configs jq
            CMD=$(_start_flower "${APP}")
            break
            ;;
        logrotate)
            _check_dependency logrotate
            CMD=$(_logrotate)
            break
            ;;
        *)
            echo "Unknown command: $COMM"
            exit 1
            ;;
    esac
done


if [ ! -z "${IF_DRYRUN}" ]
then
    echo "${CMD}" | sed 's/;\s*/;\n/g'
    exit 0
fi

eval ${CMD}
